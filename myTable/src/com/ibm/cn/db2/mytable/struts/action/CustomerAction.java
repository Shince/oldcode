/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ibm.cn.db2.mytable.struts.action;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.ibm.cn.db2.mytable.bean.Customer;
import com.ibm.cn.db2.mytable.db.CustomerNameDAO;
import com.ibm.cn.db2.mytable.db.NativePmrDAO;
import com.ibm.cn.db2.mytable.util.Util;

/** 
 * MyEclipse Struts
 * Creation date: 02-22-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="custEdit" path="/webPages/CustomerNameEdit.jsp"
 */
public class CustomerAction extends DispatchAction {
	public ActionForward view(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Util.log( "customer.view",request );
		response.setHeader("Cache-Control","no-cache");
		response.setHeader("Pragma", "no-cache");
		
		String name = request.getParameter("custName");
		String visibleS = request.getParameter("visible");
		if( name == null || name.trim().length()<1 ){
			request.setAttribute("errorMessage", "Customer Name Format error.");
			System.out.println( "Customer Name Format error" );
			return mapping.findForward("error");
		}
		
		boolean visible = Boolean.parseBoolean(visibleS);
		
		request.getSession().setAttribute("totalCount", new Integer(NativePmrDAO.getInstance().getCustNameQueryResultCount(name,visible)) );
		request.getSession().setAttribute("query", name);
		request.getSession().setAttribute("page", new Integer(1));
		request.getSession().setAttribute("useCustomer", new Boolean(true));
		request.getSession().setAttribute("visible", new Boolean(visible));
		
		return mapping.findForward("pagination");
	}
	
	public ActionForward edit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Util.log( "customer.edit",request );
		
		String name = request.getParameter("custName");
		//System.out.println( "name:" + name );
		
		if( name != null && name.trim().length() > 0 ){
			//System.out.println( "In there.." );
			Customer cust = CustomerNameDAO.getInstance().getCustomer(name);
			
			request.setAttribute("custName", cust.getName());
			request.setAttribute("d_s", cust.getStartDate());
			request.setAttribute("d_e", cust.getStopDate());
			
			ArrayList all = CustomerNameDAO.getInstance().getAllCustomerID(name);
			request.removeAttribute("myIDList");
			request.setAttribute("myIDList", all);
			
			ArrayList allIDList = NativePmrDAO.getInstance().getDistinctCustID();
			request.setAttribute("custIDList", allIDList);
			
		} else {
			request.setAttribute("errorMessage", "Cannot edit a Customer without valid name");
			return mapping.findForward("error");
		}
		
		response.setHeader("Cache-Control","no-cache");
		response.setHeader("Pragma", "no-cache");
		return mapping.findForward("custEdit");
	}
	
	public ActionForward showCreatePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Util.log( "customer.showCreatePage",request );
		
		ArrayList all = NativePmrDAO.getInstance().getDistinctCustID();
		request./*getSession().*/setAttribute("custIDList", all);
		
		response.setHeader("Cache-Control","no-cache");
		response.setHeader("Pragma", "no-cache");
		return mapping.findForward("custEdit");
	}
	
	public ActionForward create(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Util.log( "customer.create",request );
		
		String name = request.getParameter("custName");
		String[] custIDList = request.getParameterValues("CustSelected");
		String startDT = request.getParameter("d_s");
		String stopDT = request.getParameter("d_e");
		
		//System.out.println( "Name is:" + name );
		//System.out.println( "startDT is:" + startDT );
		//System.out.println( "stopDT is:" + stopDT );
		
		if( custIDList != null )
		for( int i=0; i<custIDList.length; i++ ){
			System.out.println( "cust id:" + custIDList[i] );
		}
		
		if( name != null && name.trim().length() > 0 ){
			
			if( CustomerNameDAO.getInstance().isNameExist(name) ){
				System.out.println( "....update" );
				CustomerNameDAO.getInstance().updateCustomer(name, startDT, stopDT, custIDList);
				
			} else{
				System.out.println( "....new" );
				CustomerNameDAO.getInstance().addName(name, startDT, stopDT);
				if( custIDList != null ){
					for( int i=0; i<custIDList.length; i++ ){
						CustomerNameDAO.getInstance().addID(name, custIDList[i]);
					}
				}
			}
		}

		request.setAttribute("responseString", "successful Saved");
		request.setAttribute("custNameList", CustomerNameDAO.getInstance().getAllCustomerName());
		
		response.setHeader("Cache-Control","no-cache");
		response.setHeader("Pragma", "no-cache");
		return mapping.findForward("saved");
	}
	
	public ActionForward del(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Util.log( "customer.del",request );
		
		String name = request.getParameter("custName");
		if( name != null && name.trim().length() > 0 ){
			CustomerNameDAO.getInstance().delCust(name);
		}
		request.setAttribute("custNameList", CustomerNameDAO.getInstance().getAllCustomerName());
		
		response.setHeader("Cache-Control","no-cache");
		response.setHeader("Pragma", "no-cache");
		return mapping.findForward("custName");
	}
}