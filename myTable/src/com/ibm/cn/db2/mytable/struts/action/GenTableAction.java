/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ibm.cn.db2.mytable.struts.action;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeMap;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.ibm.cn.db2.mytable.cqdb.PMRDimention;
import com.ibm.cn.db2.mytable.db.CategoryDAO;
import com.ibm.cn.db2.mytable.db.NativePmrDAO;

/** 
 * MyEclipse Struts
 * Creation date: 02-26-2008
 * 
 * XDoclet definition:
 * @struts.action
 * @struts.action-forward name="showTable" path="xxx"
 */
public class GenTableAction extends Action {
	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		String query = (String) request.getSession().getAttribute("query");
		Boolean useCustomer = (Boolean)request.getSession().getAttribute("useCustomer");
		
		boolean use = ( useCustomer == null? true: useCustomer.booleanValue() );
		
		ArrayList all = null;
		if( use ){
			all = NativePmrDAO.getInstance().getAllByCustomerName( query );
		}else{
			all = NativePmrDAO.getInstance().getAllList( query );
		}
		
		TreeMap yearMap = new TreeMap();
		TreeMap priMap = new TreeMap();
		TreeMap subMap = new TreeMap();
		TreeMap tmpMap = new TreeMap();
		
		TreeMap totalMap = new TreeMap();
		TreeMap categories = CategoryDAO.getInstance().getMainCategory();
		Set keys = categories.keySet();
		Iterator itera = keys.iterator();
		while( itera.hasNext() ){
			String id = (String)itera.next();
			String name = (String) categories.get(id);
			totalMap.put( /*id + "." +*/ name , new Integer(0));
			tmpMap.put(name, new Integer(0));
		}
		
		int count = 0;
		
		for( int i=0; i<all.size(); i++ ){
			HashMap map = (HashMap)all.get(i);
			
			String category = (String)map.get("category");
			String subcategory = (String)map.get("subcategory");
			String visible = (String)map.get("visible");
			
			String pri = (String)map.get(PMRDimention.PROB_CUR_SEV_CD);
			String opendt = (String)map.get(PMRDimention.PMR_OPEN_DT);
			
			String year = "";
			if( opendt != null && opendt.trim().length() > 4 )year= opendt.trim().substring(0,4);
			else System.out.println( "OpenDate format error" );
			
			if( visible.compareTo("1") == 0 ){
				if( totalMap.containsKey(category) ){
					totalMap.put( category , new Integer(((Integer)totalMap.get(category)).intValue() + 1));
				}
				
				//按照年度统计分类的累计
				if( yearMap.containsKey( /*"year " +*/ year ) ){
					TreeMap thisYearMap = ((TreeMap)yearMap.get( /*"year " +*/ year ));
					if( thisYearMap.containsKey(category) ){
						thisYearMap.put(category, new Integer(( (Integer)thisYearMap.get(category) ).intValue()+1) );
					}else{
						thisYearMap.put(category, new Integer(1));
					}
				}else{
					TreeMap ymap = (TreeMap)tmpMap.clone();
					ymap.put(category, new Integer(1));
					yearMap.put( /*"year " +*/ year , ymap);
				}
				
				//按照priority统计分类的累计
				if( priMap.containsKey("priority " + pri) ){
					TreeMap thisPriMap = ((TreeMap)priMap.get("priority " + pri));
					if( thisPriMap.containsKey(category) ){
						thisPriMap.put(category, new Integer(( (Integer)thisPriMap.get(category) ).intValue()+1) );
					}else{
						thisPriMap.put(category, new Integer(1));
					}
				}else{
					//priMap.put("priority " + pri, new TreeMap());
					TreeMap primap = (TreeMap)tmpMap.clone();
					primap.put(category, new Integer(1));
					priMap.put("priority " + pri, primap);
				}
				
				//按照分类统计子分类的累计
				if( subMap.containsKey( category ) ){
					TreeMap sub = (TreeMap)subMap.get( category );
					if( sub.containsKey( subcategory ) ){
						sub.put( subcategory , new Integer(((Integer)sub.get(subcategory)).intValue() + 1 ));
					}else{
						sub.put( subcategory , new Integer(1) );
					}
				}else{
					TreeMap submap = new TreeMap();
					submap.put( subcategory, new Integer(1));
					subMap.put(category, submap);
				}
				count ++;
			}
		}
		
		DecimalFormat formatter =new DecimalFormat("#########0.00");
		Set set = subMap.keySet();
		Iterator iter = set.iterator();
		while( iter.hasNext() ){
			String key = (String)iter.next();
			TreeMap map = (TreeMap) subMap.get(key);
			
			/*
			 *为了生成图表～
			 */
			//System.out.println( "Set TreeMap:" + key + "---" + map );
			request.getSession().setAttribute( key , new TreeMap(map) );
			
			Set subSet = map.keySet();
			Iterator subIter = subSet.iterator();
			int total = 0;
			while( subIter.hasNext() ){
				String subKey = (String)subIter.next();
				int c = ((Integer)map.get(subKey)).intValue();
				total += c;
			}
			map.put("total", new Integer(total) );
			map.put("percentage", formatter.format( ((float)total)/count * 100 ) + "%");
		}
		
		request.getSession().setAttribute("totalMap", totalMap);
		request.setAttribute("yearMap", yearMap);
		request.setAttribute("priMap", priMap);
		request.setAttribute("subMap", subMap);
		request.setAttribute("total", new Integer(count));
		
		Set yearSet = yearMap.keySet();
		Iterator yearIter = yearSet.iterator();
		while( yearIter.hasNext() ){
			String key = (String)yearIter.next();
			request.getSession().setAttribute(  key, yearMap.get( key ));
		}
		
		Set priSet = priMap.keySet();
		Iterator priIter = priSet.iterator();
		while( priIter.hasNext() ){
			String key = (String)priIter.next();
			request.getSession().setAttribute(  key, priMap.get( key ));
		}
		
		response.setHeader("Cache-Control","no-cache");
		response.setHeader("Pragma", "no-cache");

		return mapping.findForward("showTable");
	}
}